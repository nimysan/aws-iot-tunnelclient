package top.cuteworld.iotdemo.oldversion;

import com.amazonaws.services.iot.client.AWSIotException;
import com.amazonaws.services.iot.client.AWSIotMessage;
import com.amazonaws.services.iot.client.AWSIotMqttClient;
import com.amazonaws.services.iot.client.AWSIotTopic;
import com.amazonaws.services.iot.client.auth.Credentials;
import com.amazonaws.services.iot.client.auth.CredentialsProvider;
import com.amazonaws.services.iot.client.auth.StaticCredentialsProvider;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.ServerSocket;

/**
 * tunnel 驻守进程
 */
public class TunnelProcess {

    public static final Logger logger = LoggerFactory.getLogger(TunnelProcess.class);

    private static class TunnelNotificationListener extends AWSIotTopic {
        public TunnelNotificationListener(String topic) {
            super(topic);
        }

        @Override
        public void onMessage(AWSIotMessage message) {
            try {
                logger.info("The message is {}", message.getStringPayload());
                // Deserialize the MQTT message
                final JSONObject json = new JSONObject(message.getStringPayload());

                final String accessToken = json.getString("clientAccessToken");
                final String region = json.getString("region");









                final String clientMode = json.getString("clientMode");
                if (!clientMode.equals("destination")) {
                    throw new RuntimeException("Client mode " + clientMode + " in the MQTT message is not expected");
                }

                final JSONArray servicesArray = json.getJSONArray("services");
                if (servicesArray.length() > 1) {
                    throw new RuntimeException("Services in the MQTT message has more than 1 service");
                }
                final String service = servicesArray.get(0).toString();
                if (!service.equals("SSH")) {
                    throw new RuntimeException("Service " + service + " is not supported");
                }

                // Start the destination local proxy in a separate process to connect to the SSH Daemon listening port 22
                final ProcessBuilder pb = new ProcessBuilder("localproxy",
                        "-t", accessToken,
                        "-r", region,
                        "-d", "localhost:22");
                pb.start();
            } catch (Exception e) {
                logger.error("Failed to start the local proxy", e);
            }
        }
    }


    //    public static AWSIotClient iotClient;
    public static void main(String[] args) {
        // Find the IoT device endpoint for your AWS 账户
        final String endpoint = args[0];
        final String thingName = args[1];

        // Instantiate the IoT Agent with your AWS credentials
//        final String thingName = "zg_d1";
        final String tunnelNotificationTopic = String.format("$aws/things/%s/tunnels/notify", thingName);

        logger.info("Try to connect to {}", tunnelNotificationTopic);

        String ak = args[2];
        String sk = args[3];
        logger.info("Connect with ak {}", ak);

        CredentialsProvider credentialsProvider = new StaticCredentialsProvider(new Credentials(ak, sk));


        final AWSIotMqttClient mqttClient = new AWSIotMqttClient(endpoint, thingName,
                credentialsProvider, "ap-southeast-1");
        try {

            mqttClient.connect();
            final TunnelNotificationListener listener = new TunnelNotificationListener(tunnelNotificationTopic);
            mqttClient.subscribe(listener, true);
            logger.info("stuck here");
            //防止退出而已
            ServerSocket serverSocket = new ServerSocket(8888);
            serverSocket.accept();
        } catch (AWSIotException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                mqttClient.disconnect();
            } catch (AWSIotException e) {
                e.printStackTrace();
            }
        }
    }
}
